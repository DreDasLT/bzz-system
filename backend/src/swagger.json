{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Bzz System API",
    "description": "Bzz system API for controlling cars",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "/api/",
      "description": "From localhost api"
    }
  ],
  "tags": [
    {
      "name": "Car",
      "description": "Endpoints with cars in the system"
    },
    {
      "name": "Model",
      "description": "Endpoints with models in the system"
    },
    {
      "name": "Price",
      "description": "Endpoints with prices in the system"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/car": {
      "get": {
        "tags": [
          "Car"
        ],
        "summary": "Get all cars in system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Car"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Car"
        ],
        "summary": "Create a new car in system",
        "requestBody": {
          "description": "Car Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Car"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Car"
            }
          },
          "400": {
            "description": "Failed. Bad post data."
          }
        }
      }
    },
    "/car/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the car that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Car"
        ],
        "summary": "Get car with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Car with id",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Car"
            }
          },
          "404": {
            "description": "Failed. Car not found."
          }
        }
      },
      "put": {
        "summary": "Update car with given ID",
        "tags": [
          "Car"
        ],
        "requestBody": {
          "description": "Car Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Car"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Car with new values of properties",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Car"
            }
          },
          "400": {
            "description": "Failed. Bad post data."
          },
          "404": {
            "description": "Failed. Car not found."
          }
        }
      },
      "delete": {
        "summary": "Delete car with given ID",
        "tags": [
          "Car"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Delete Car with id",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Car"
            }
          },
          "404": {
            "description": "Failed. Car not found."
          }
        }
      }
    },
    "/model": {
      "get": {
        "tags": [
          "Model"
        ],
        "summary": "Get all models in system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Model"
        ],
        "summary": "Create a new model in system",
        "requestBody": {
          "description": "Model Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Model"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "400": {
            "description": "Failed. Bad post data."
          }
        }
      }
    },
    "/model/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the model that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Model"
        ],
        "summary": "Get model with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Model with id",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "404": {
            "description": "Failed. Model not found."
          }
        }
      },
      "put": {
        "summary": "Update model with given ID",
        "tags": [
          "Model"
        ],
        "requestBody": {
          "description": "Model Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Model"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Model with new values of properties",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "400": {
            "description": "Failed. Bad post data."
          },
          "404": {
            "description": "Failed. Model not found."
          }
        }
      },
      "delete": {
        "summary": "Delete model with given ID",
        "tags": [
          "Model"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Delete Model with id",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "404": {
            "description": "Failed. Model not found."
          }
        }
      }
    },
    "/model/{id}/cars": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the model whose cars we are trying to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Model"
        ],
        "summary": "Get cars with given model ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Model with id",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "404": {
            "description": "Failed. Model not found."
          }
        }
      }
    },
    "/price": {
      "get": {
        "tags": [
          "Price"
        ],
        "summary": "Get all prices in system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Price"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Price"
        ],
        "summary": "Create a new price in system",
        "requestBody": {
          "description": "Price Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Price"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Price"
            }
          },
          "400": {
            "description": "Failed. Bad post data."
          }
        }
      }
    },
    "/price/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the price that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Price"
        ],
        "summary": "Get price with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Price with id",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Price"
            }
          },
          "404": {
            "description": "Failed. Price not found."
          }
        }
      },
      "put": {
        "summary": "Update price with given ID",
        "tags": [
          "Price"
        ],
        "requestBody": {
          "description": "Price Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Price"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Price with new values of properties",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Price"
            }
          },
          "400": {
            "description": "Failed. Bad post data."
          },
          "404": {
            "description": "Failed. Price not found."
          }
        }
      },
      "delete": {
        "summary": "Delete price with given ID",
        "tags": [
          "Price"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Delete Price with id",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Price"
            }
          },
          "404": {
            "description": "Failed. Price not found."
          }
        }
      }
    }
  },
  "definitions": {
    "id": {
      "properties": {
        "uuid": {
          "type": "string"
        }
      }
    },
    "Car": {
      "type": "object",
      "properties": {
        "model": {
          "type": "string"
        },
        "gasTank": {
          "type": "number"
        },
        "status": {
          "type": "number"
        },
        "location": {
          "type": "array",
          "items": {
            "type": "number"
          }
        }
      }
    },
    "Cars": {
      "type": "object",
      "properties": {
        "car": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Car"
          }
        }
      }
    },
    "Model": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "prices": {
          "$ref": "#/definitions/Price"
        }
      }
    },
    "Models": {
      "type": "object",
      "properties": {
        "model": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Model"
          }
        }
      }
    },
    "Price": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "minute": {
          "type": "number"
        },
        "hour": {
          "type": "number"
        },
        "day": {
          "type": "number"
        },
        "week": {
          "type": "number"
        },
        "month": {
          "type": "number"
        },
        "km": {
          "type": "number"
        }
      }
    }
  }
}